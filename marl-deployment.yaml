apiVersion: apps/v1
kind: Deployment
metadata:
  name: marl-deployment
  labels:
    app: marl-1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: marl-1
  template:
    metadata:
      labels:
        app: marl-1
    spec:
      containers:
      - name: coffeeshop
        image: marciy1/marl_project-1:v1
        ports:
        - containerPort: 80
      imagePullSecrets: 
        - name: dockerhub-secret
      tolerations:
      - key: "marl-deployment"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      - key: "coffeeshop"
        operator: "Exists"
        effect: "PreferNoSchedule"
        #tolerationSeconds: 60 works only with NoExercute
      nodeSelector:
        marl-deployment: "true"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: marl-deployment
                operator: In
                values:
                - "true"
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: GPU
                operator: In
                values:
                - "true" 
  strategy:                # This defines the update strategy for the Deployment.
    type: RollingUpdate    # This strategy replaces Pods incrementally, while maintaining availability.
    rollingUpdate:
      maxUnavailable: 1  # Max number of Pods to terminate at any time during update (you can use percentages here i.e. 25%)
      maxSurge: 1        # Max number of Pods to add or create at a time during update (you can use percentages here i.e. 25%)


---
apiVersion: v1
kind: Service
metadata: 
  name: marl-lb-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-target-type: "instance"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "TCP"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "traffic-port"
spec:
  selector:
    app: marl-1
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
  externalTrafficPolicy: Local